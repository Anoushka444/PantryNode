#!/usr/bin/env node

/**
 * Sequelize Postgres Testing (db Docker container must be running)
 */
const { Sequelize, DataTypes, Model } = require('sequelize');

/**
 * Create connection
 */
const sequelize = new Sequelize('postgres://postgres:pantrynode@localhost:5432/pantrynode');

/**
 * Test Suite
 * 
 * Uncomment functions as needed
 */
async function testSuite() {

    // Test Connection
    await testConnection();

    // Drop existing Person table if needed
    // await Person.drop();

    // Model Sync
    // await testSync();

    // Create
    // await testCreate();

    // Read
    // await testRead();

    // Update
    // await testUpdate();

    // Delete
    // await testDelete();
}

/**
 * Define "Person" model
 */
class Person extends Model {
    getFullname() {
        return [this.fname, this.lname].join(' ');
    }
}

Person.init({
    person_id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    fname: {
        type: DataTypes.STRING,
        allowNull: false
    },
    lname: {
        type: DataTypes.STRING,
        allowNull: false
    },
    password: {
        type: DataTypes.STRING,
        allowNull: false
    },
    email: {
        type: DataTypes.STRING,
        allowNull: false
    },
    phone: {
        type: DataTypes.BIGINT,
        allowNull: false
    },
    pri_addr_id: {
        type: DataTypes.INTEGER,
        allowNull: false,
    },
    empl_id: {
        type: DataTypes.INTEGER,
        allowNull: false,
    }
}, {
    // Other model options go here
    sequelize, // We need to pass the connection instance
    tableName: 'Person',
    modelName: 'Person' // We need to choose the model name
});


/**
 * Test Connection
 */
async function testConnection() {
    try {
        await sequelize.authenticate();
        console.log('Connection has been established successfully.');
    } catch (error) {
        console.error('Unable to connect to the database:', error);
    }
}

/**
 * Sync testing
 * 
 * Use alter: true to update an existing table
 * https://sequelize.org/docs/v6/core-concepts/model-basics/#model-synchronization
 * 
 * Not recommended for production - simpler to build the db beforehand.
 */
async function testSync() {
    await Person.sync({ alter: true });
}

/**
 * Create Test
 */
async function testCreate() {
    const jane = Person.create({
        fname: "Jane",
        lname: "Doe",
        password: "password",
        email: "janedoe@test.com",
        phone: 5555555555,
        pri_addr_id: 2,
        empl_id: 2
    });
    console.log("Jane's auto-generated ID:", jane.id);
}

/**
 * Read Test
 */
async function testRead() {
    const people = await Person.findAll();
    console.log(people.every(person => person instanceof Person));
    console.log("All people:", JSON.stringify(people, null, 2));
}

/**
 * Update Test
 */
async function testUpdate() {
    const jane = await Person.findOne({ where: { person_id: 1 } });
    if (jane === null) {
        console.log('No "Person" found!');
    } else {
        console.log(jane instanceof Person); // true
        jane.update({email: 'email@janedoe.test'});
    }
}

/**
 * Delete Test
 */
async function testDelete() {
    const jane = await Person.findOne({ where: { person_id: 2 } });
    if (jane === null) {
        console.log('No "Person" found!');
    } else {
        console.log(jane instanceof Person); // true
        jane.destroy();
    }
}


testSuite();